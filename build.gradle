buildscript {
    ext {
        kotlinVersion = '1.0.3'
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.6'
    }
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "com.github.hierynomus.license"

license {
    skipExistingHeaders = true
    header file('LICENSE')
    includes(["**/*.kt"])
    mapping {
        kt = 'SLASHSTAR_STYLE'
    }
}

jar {
    baseName = 'cloud-native-eureka'
    version = '1.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka-server'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR1"
    }
}

springBoot {
    executable = true
}

docker {
    url = System.env.DOCKER_HOST?.replace('tcp', 'https') ?: 'https://192.168.99.100:2376'
    certPath = file("${System.getProperty('user.home')}/.docker/machine/machines/default")
}

import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

task dockerInfo(type: DockerInfo) {}
task dockerVersion(type: DockerVersion) {}

task buildDockerImage(type: DockerBuildImage) {
    inputDir = projectDir
    noCache = false
    remove = true
    tag = "$project.name:$version"
}

task removeDockerImage(type: DockerRemoveImage) {
    imageId = "$project.name:$version"
}